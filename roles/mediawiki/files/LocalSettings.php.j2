<?php
/**
 * Copyright (C) 2013 Orain, Kudu and contributors
 *
 * This file is part of Orain's playbook.
 *
 * Orain's playbook is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * Orain's playbook is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with Orain's playbook.  If not, see <http://www.gnu.org/licenses/>.
 */

// Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

/**
 * Load the below extensions for all wikis
 *
 * @note If you are including a new extension you should ensure it is included in
 *  the mediawiki-core repo in the extensions directory
 * @note To make sure it updates according to that repo it should also be included
 *  in the main.yml task file for mediawiki
 */
require_once( "$IP/extensions/AdminLinks/AdminLinks.php" );
require_once( "$IP/extensions/AntiSpoof/AntiSpoof.php" );
require_once( "$IP/extensions/AbuseFilter/AbuseFilter.php" );
require_once( "$IP/extensions/Babel/Babel.php" );
require_once( "$IP/extensions/CategoryTree/CategoryTree.php" );
require_once( "$IP/extensions/CentralAuth/CentralAuth.php" );
require_once( "$IP/extensions/CentralNotice/CentralNotice.php" );
require_once( "$IP/extensions/CheckUser/CheckUser.php" );
require_once( "$IP/extensions/Cite/Cite.php" );
require_once( "$IP/extensions/Cite/SpecialCite.php" );
require_once( "$IP/extensions/ConfirmEdit/Asirra.php" );
require_once( "$IP/extensions/ConfirmEdit/ConfirmEdit.php" );
require_once( "$IP/extensions/DismissableSiteNotice/DismissableSiteNotice.php" );
require_once( "$IP/extensions/intersection/DynamicPageList.php" );
require_once( "$IP/extensions/Gadgets/Gadgets.php" );
require_once( "$IP/extensions/GlobalBlocking/GlobalBlocking.php" );
require_once( "$IP/extensions/InputBox/InputBox.php" );
require_once( "$IP/extensions/Interwiki/Interwiki.php" );
require_once( "$IP/extensions/MassMessage/MassMessage.php" );
require_once( "$IP/extensions/Nuke/Nuke.php" );
require_once( "$IP/extensions/OrainMessages/OrainMessages.php" );
require_once( "$IP/extensions/ParserFunctions/ParserFunctions.php" );
require_once( "$IP/extensions/Renameuser/Renameuser.php" );
require_once( "$IP/extensions/Scribunto/Scribunto.php" );
require_once( "$IP/extensions/SimpleAntiSpam/SimpleAntiSpam.php" );
require_once( "$IP/extensions/SiteMatrix/SiteMatrix.php" );
require_once( "$IP/extensions/SpamBlacklist/SpamBlacklist.php" );
require_once( "$IP/extensions/SyntaxHighlight_GeSHi/SyntaxHighlight_GeSHi.php" );
require_once( "$IP/extensions/TemplateSandbox/TemplateSandbox.php" );
require_once( "$IP/extensions/TitleBlacklist/TitleBlacklist.php" );
require_once( "$IP/extensions/TitleKey/TitleKey.php" );
require_once( "$IP/extensions/Variables/Variables.php" );
require_once( "$IP/extensions/YouTube/YouTube.php" );
require_once( "$IP/skins/foreground/foreground.php" );
require_once( "$IP/skins/monaco/monaco.php" );
require_once( "$IP/extensions/WikiLove/WikiLove.php" );

$wgConf = new SiteConfiguration;
$wgConf->suffixes = array( 'wiki' );
$wgConf->localVHosts = array( '{{mysql_address}}' );

/**
 * Define namespaces for all wikis
 *
 * @note These namespaces technically are defined across all wikis, they are simply not enabled everywhere.
 * @note These namespaces should NEVER be removed unless all wikis that have ever used them have been deleted
 */
// botwiki
define( "NS_FRAMEWORK", 500 );
define( "NS_FRAMEWORK_TALK", 501 );
define( "NS_SCRIPT", 502 );
define( "NS_SCRIPT_TALK", 503 );
define( "NS_BOT", 504 );
define( "NS_BOT_TALK", 505 );
define( "NS_RUN", 506 );
define( "NS_RUN_TALK", 507 );
// /botwiki

// wikinambaswiki
define( "NS_OFICINA", 508 );
define( "NS_OFICINA_TALK", 509 );
define( "NS_PROJETO", 510 );
define( "NS_PROJETO_TALK", 511 );
define( "NS_ATIVIDADE", 512 );
define( "NS_ATIVIDADE_TALK", 513 );
define( "NS_ESTUDIO", 514 );
define( "NS_ESTUDIO_TALK", 515 );
// /wikinambaswiki

// frmodamobwiki
define( "NS_PORTAIL", 516 );
define( "NS_PORTAIL_TALK", 517 );
define( "NS_PROJET", 518 );
define( "NS_PROJET_TALK", 519 );
// /frmodamobwiki

/**
 * NOTE: When changing the below variable all caches need to be updated otherwise
 * we will continue linking to old file locations on cached pages!
 */
$wmgUploadHostname = "d326vv62q24mzw.cloudfront.net";

/**
 * Define settings per wiki
 * @see https://www.mediawiki.org/wiki/Manual:$wgConf
 */
$wgConf->settings = array(
	// AbuseFilter
	'wgAbuseFilterCentralDB' => array(
		'default' => 'metawiki',
	),
	'wgAbuseFilterIsCentral' => array(
		'default' => false,
		'metawiki' => true,
	),
	// /AbuseFilter

	// Anti-spam
	'wgAccountCreationThrottle' => array(
		'default' => 6,
	),
	'wgCaptchaClass' => array(
		'default' => 'Asirra',
	),
	'wgSpamBlacklistFiles' => array(
		'default' => array(
			"DB: metawiki Spam_blacklist",
			"https://meta.wikimedia.org/w/index.php?title=Spam_blacklist&action=raw",
		),
	),
	'wgTitleBlacklistSources' => array(
		'default' => array(
			array(
					 'type' => TBLSRC_LOCALPAGE,
					 'src'  => 'MediaWiki:Titleblacklist',
			),
			array(
					 'type' => TBLSRC_URL,
					 'src'  => '//meta.orain.org/w/index.php?title=Title_blacklist&action=raw',
			),
			array(
					 'type' => TBLSRC_URL,
					 'src'  => '//meta.wikimedia.org/w/index.php?title=Title_blacklist&action=raw',
			),
		),
	),
	// /Anti-spam

	// Block
	'wgBlockAllowsUTEdit' => array(
		'default' => true,
	),
	// /Block
	
	// Bigdelete
	'wgDeleteRevisionsLimit' => array(
	    'default' => 1000, // Default bigdelete limit
	),
	// /Bigdelete
	
	// Global block
	'wgApplyGlobalBlocks' => array(
		'default' => true,
		'metawiki' => false,
	),
	// /Global block

	// Cache
	'wgEnableSidebarCache' => array(
		'default' => true,
	),
	'wgHitcounterUpdateFreq' => array(
		'default' => 20,
	),
	'wgMainCacheType' => array(
		'default' => CACHE_MEMCACHED,
	),
	'wgMemCachedServers' => array(
		'default' => array( '127.0.0.1:11211' ),
	),
	'wgMiserMode' => array(
		'allthetropeswiki' => true,
	),
	'wgParserCacheExpireTime' => array(
		'default' => 604800, // 7 days
	),
	'wgRevisionCacheExpiry' => array(
		'default' => 259200, // 3 days
	),
	'wgSessionsInObjectCache' => array(
		'default' => true,
	),
	'wgUseFileCache' => array(
		'default' => true,
	),
	'wgUseLocalMessageCache' => array(
		'default' => false,
	),
	// /Cache

	// CentralAuth
	'wgCentralAuthAutoLoginWikis' => array(
		'default' => array(
			'espiral.org' => 'spiralwiki',
			'wikiconstitucio.org' => 'wikiconstituciowiki',
		),
	),
	'wgCentralAuthAutoMigrate' => array(
		'default' => true,
	),
	'wgCentralAuthAutoNew' => array(
		'default' => true,
	),
	'wgCentralAuthCookieDomain' => array(
		'default' => '.orain.org',
	),
	'wgCentralAuthCookies' => array(
		'default' => true,
	),
	'wgCentralAuthCreateOnView' => array(
		'default' => true,
	),
	'wgCentralAuthLoginWiki' => array(
		'default' => 'loginwiki',
	),
	'wgCentralAuthSilentLogin' => array(
		'default' => true,
	),
	'wgDisableUnmergedEditing' => array(
		'default' => false,
	),
	'wgSiteMatrixSites' => array(
		'default' => array(),
	),
	// /CentralAuth

	// CentralNotice
	'wgNoticeInfrastructure' => array(
		'default' => false,
		'metawiki' => true,
	),
	'wgNoticeProjects' => array(
		'default' => array(),
		// NOTE: 'orain' group means official wikis
		'metawiki' => array( 'orain', 'closed', 'private', 'public' ),
	),
	'wgCentralHost' => array(
		'default' => '//meta.orain.org',
	),
	'wgCentralPagePath' => array(
		'default' => '//meta.orain.org/w/index.php',
	),
	'wgNoticeProject' => array(
		'default' => 'public',
		'metawiki' => 'orain',
		'extloadwiki' => 'orain',
		'loginwiki' => 'orain',
		// private and closed groups are set further down
	),
	// /CentralNotice
	
	// CheckUser
	'wgCheckUserForceSummary' => array(
	    'default' => true,
	),
	// /CheckUser
	
	// Database
	'wgCompressRevisions' => array(
		'default' => true,
	),
	'wgDBpassword' => array(
		'default' => "{{mw_db_password}}",
	),
	'wgDBprefix' => array(
		'default' => '',
	),
	'wgDBserver' => array(
		'default' => "{{mysql_address}}",
	),
	'wgDBTableOptions' => array(
		'default' => "ENGINE=InnoDB, DEFAULT CHARSET=binary",
	),
	'wgDBtype' => array(
		'default' => 'mysql',
	),
	'wgDBuser' => array(
		'default' => "{{mw_db_user}}",
	),
	'wgSharedDB' => array(
		'default' => 'metawiki',
	),
	'wgSharedTables' => array(
		'default' => array(),
	),
	// /Database

	// Email
	'wgEmailAuthentication' => array(
		'default' => true,
	),
	'wgEmergencyContact' => array(
		'default' => 'help@orain.org',
	),
	'wgEnableEmail' => array(
		'default' => true,
	),
	'wgEnableUserEmail' => array(
		'default' => true,
	),
	'wgEnotifMinorEdits' => array(
		'default' => true,
	),
	'wgEnotifUserTalk' => array(
		'default' => true,
	),
	'wgEnotifWatchlist' => array(
		'default' => true,
	),
	'wgPasswordSender' => array(
		'default' => 'help@orain.org',
	),
	'wgSMTP' => array(
		'default' => array(
			'host'     => 'mail.orain.org',
			'port'     => 25,
			'IDHost'   => 'orain.org',
			'auth'     => true,
			'username' => 'help',
			'password' => '{{email_password}}',
		),
	),
	// /Email

	// Files
	'wgEnableUploads' => array(
		'default' => false,
		'upload' => true,
	),
	'wgFileExtensions' => array(
		'default' => array( 'gif', 'ico', 'jpeg', 'jpg', 'ogg', 'png', 'svg' ),
		'+encyclopedianationalwiki' => array( 'pdf' ),
	),
	'wgAllowTitlesInSVG' => array(
		'default' => true,
	),
	'wgGenerateThumbnailOnParse' => array(
		'default' => false,
	),
	'wgUseInstantCommons' => array(
		'default' => true,
	),
	// /Files
	
	// Global Group Settings
	'+wgAvailableRights' => array( // + to avoid any possible conflicts
	    'default' => array(
	        'steward' // Allow this restriction level be added to the global usergroup
	    ),
	),
	// /Global Group Settings

	// GraphicsMagick
	'wgImageMagickConvertCommand' => array(
		'default' => "/usr/bin/convert",
	),
	'wgShellLocale' => array(
		'default' => "en_US.utf8",
	),
	'wgUseImageMagick' => array(
		'default' => true,
	),
	// /GraphicsMagick
	
	// Imports
	'wgImportSources' => array(
		'default' => array(
			'meta',
			'test'
		),
		'+testwiki' => array(
			'train'
		),
	),
	// /Imports

	// Keys
	'wgSecretKey' => array(
		'default' => '{{wgSecretKey}}',
	),
	'wgUpgradeKey' => array(
		'default' => '{{wgUpgradeKey}}',
	),
	// /Keys

	// Language
	'wgLanguageCode' => array(
		'default' => 'en',
		'frmodamobwiki' => 'fr',
		'trainwiki' => 'ko',
		'keionrailwiki' => 'ko',
		'ukrwiki1wiki' => 'uk',
		'wikiconstituciowiki' => 'ca',
		'yuewikivoyagewiki' => 'zh-yue',
		'wikinambaswiki' => 'pt-br',
		'worldpediawiki' => 'zh-hant',
	),
	// /Language

	// License
	'wgRightsIcon' => array(
		'default' => "//$wmgUploadHostname/common/skins/common/images/cc-by-sa.png",
		'spiralwiki' => "//$wmgUploadHostname/common/skins/common/images/cc-0.png",
	),
	'wgRightsPage' => array(
		'default' => '',
	),
	'wgRightsText' => array(
		'default' => 'Creative Commons Attribution Share Alike',
		'spiralwiki' => 'CC0 Public Domain',
	),
	'wgRightsUrl' => array(
		'default' => 'https://creativecommons.org/licenses/by-sa/3.0/',
		'spiralwiki' => 'https://creativecommons.org/publicdomain/zero/1.0/',
	),
	// /License
	
	// MassMessage
	'wgNamespacesToPostIn' => array(
	    'default' => array( NS_PROJECT, NS_USER_TALK ),
	    '+metawiki' => array( NS_MAIN ),
	),
	'wgNamespacesToConvert' => array(
	    'default' => array( NS_USER => NS_USER_TALK ),
	),
	'wgMassMessageAccountUsername' => array(
	    'default' => 'OrainMessenger',
	),
	'wgAllowGlobalMessaging' => array(
	    'default' => false,
	    'metawiki' => true,
	),
	// /MassMessage
	
	// Misc. extensions
	'ceAllowConfirmedEmail' => array(
		'default' => true,
	),
	'wmgClosedWiki' => array(
		'default' => false,
		'closed' => true,
	),
	'+wgCreateWikiSQLfiles' => array(
		'metawiki' => array(
			"$IP/extensions/AbuseFilter/abusefilter.tables.sql",
			"$IP/extensions/AntiSpoof/sql/patch-antispoof.mysql.sql",
			"$IP/extensions/CheckUser/cu_changes.sql",
			"$IP/extensions/CheckUser/cu_log.sql",
			"$IP/extensions/CreateWiki/global_block_whitelist.sql",
		),
	),
	'wgInterwikiViewOnly' => array(
		'default' => true,
		'metawiki' => false,
	),
	'wgMFAutodetectMobileView' => array(
		'default' => true,
	),
	'wmgPrivateWiki' => array(
		'default' => false,
		'private' => true,
	),
	'wgThanksConfirmationRequired' => array(
		'default' => true,
		'spiralwiki' => false, // required for testing --addshore qgil
		'testwiki' => false,
	),
	'wgScribuntoUseGeSHi' => array(
		'default' => true,
	),
	'wgScribuntoDefaultEngine' => array(
		'default' => 'luastandalone',
	),
	'wmgUseCodeEditor' => array(
		'default' => false,
		'extloadwiki' => true, // all extensions are loaded on this wiki
		'allthetropeswiki' => true,
		'mediawikitesterswiki' => true,
		'wikinambaswiki' => true,
	),
	'wmgUseDPLforum' => array(
		'default' => false,
		'extloadwiki' => true, // all extensions are loaded on this wiki
		'allthetropeswiki' => true,
		'frmodamobwiki' => true,
		'mediawikitesterswiki' => true,
		'metawiki' => true,
	),
	'wmgUseOrainFooter' => array(
	    'default' => false,
	    'allthetropeswiki' => true,
	    'mediawikitesterswiki' => true,
	    'testwiki' => true,
	),
	'wmgUseMobileFrontend' => array(
		'default' => false,
		'extloadwiki' => true, // all extensions are loaded on this wiki
		'keionrailwiki' => true,
		'grayhawkwiki' => true,
		'spiralwiki' => true,
		'wikiconstituciowiki' => true,
		'wikinambaswiki' => true,
	),
	'wmgUseQuiz' => array(
		'default' => false,
		'extloadwiki' => true, // all extensions are loaded on this wiki
		'mediawikitesterswiki' => true,
		'patereswiki' => true,
	),
	'wmgUseReplaceText' => array(
		'default' => false,
		'extloadwiki' => true, // all extensions are loaded on this wiki
		'mediawikitesterswiki' => true,
		'patereswiki' => true,
	),
	'wmgUseSideBarMenu' => array(
		'default' => false,
		'extloadwiki' => true, // all extensions are loaded on this wiki
		//'allthetropeswiki' => true, // causes white screens needs debugging before deploying, https://botbot.me/freenode/orain/msg/7625854/ - addshore 7.nov.13
	),
	'wmgUseWikiEditor' => array(
		'default' => true,
		'extloadwiki' => true, // all extensions are loaded on this wiki
		'elderlordswiki' => false,
		'encyclopedianationalwiki' => false,
		'wikinambaswiki' => true,
	),
	// /Misc. extensions

	// Names
	'wgContentNamespaces' => array(
		'botwiki' => array( NS_BOT, NS_FRAMEWORK, NS_SCRIPT ),
	),
	'wgExtraNamespaces' => array(
		'botwiki' => array(
			NS_BOT => 'Bot',
			NS_BOT_TALK => 'Bot_talk',
			NS_FRAMEWORK => 'Framework',
			NS_FRAMEWORK_TALK => 'Framework_talk',
			NS_RUN => 'Run',
			NS_RUN_TALK => 'Run_talk',
			NS_SCRIPT => 'Script',
			NS_SCRIPT_TALK => 'Script_talk',
		),
		'frmodamobwiki' => array(
			NS_PORTAIL => 'Portail',
			NS_PORTAIL_TALK => 'Discussion_Portail',
			NS_PROJET => 'Projet',
			NS_PROJET_TALK => 'Discussion_Projet',
		),
		'wikinambaswiki' => array(
			NS_OFICINA => 'Oficina',
			NS_OFICINA_TALK => 'Oficina_Discussão',
			NS_PROJETO => 'Projeto',
			NS_PROJETO_TALK => 'Projeto_Discussão',
			NS_ATIVIDADE => 'Atividade',
			NS_ATIVIDADE_TALK => 'Atividade_Discussão',
			NS_ESTUDIO => 'Estúdio',
			NS_ESTUDIO_TALK => 'Estúdio_Discussão',
		),
	),
	'wgMetaNamespace' => array(
		'metawiki' => 'Meta',
	),
	'wgNamespaceAliases' => array(
		'keionrailwiki' => array(
			'사'   => NS_USER,
			'사토' => NS_USER_TALK,
		),
		'trainwiki' => array(
			'사'   => NS_USER,
			'사토' => NS_USER_TALK,
		),
	),
	'+wgNamespacesWithSubpages' => array(
		'default' => array(
			NS_TEMPLATE => true,
		),
		'+allthetropeswiki' => array(
			NS_MAIN => true,
		),
		'+botwiki' => array(
			NS_BOT => true,
			NS_BOT_TALK => true,
			NS_CATEGORY => true,
			NS_FRAMEWORK => true,
			NS_FRAMEWORK_TALK => true,
			NS_RUN => true,
			NS_RUN_TALK => true,
			NS_SCRIPT => true,
			NS_SCRIPT_TALK => true,
		),
		'+frmodamobwiki' => array(
			NS_PORTAIL => true,
			NS_PORTAIL_TALK => true,
			NS_PROJET => true,
			NS_PROJET_TALK => true,
		),
		'+mediawikitesterswiki' => array(
			NS_MAIN => true,
		),
		'+metawiki' => array(
			NS_MAIN => true,
		),
		'+wikinambaswiki' => array(
			NS_OFICINA => true,
			NS_OFICINA_TALK => true,
			NS_PROJETO => true,
			NS_PROJETO_TALK => true,
			NS_ATIVIDADE => true,
			NS_ATIVIDADE_TALK => true,
			NS_ESTUDIO => true,
			NS_ESTUDIO_TALK => true,
		),
	),
	'wgSitename' => array(
		'default' => 'Unconfigured',
	),
	// /Names

	// ParserFunctions
	'wgPFEnableStringFunctions' => array(
		'default' => true,
	),
	// /ParserFunctions

	// Permissions
	'wgAddGroups' => array(
		'default' => array(
			'bureaucrat' => array(
				'autopatrolled',
				'bot',
				'bureaucrat',
				'confirmed',
				'member',
				'rollbacker',
				'sysop',
			),
			'sysop' => array(
				'autopatrolled',
				'confirmed',
				'member',
				'rollbacker',
			),
		),
	),
	'wgAutoConfirmAge' => array(
		'default' => 111600, // 31 h * 60 min/h * 60 s/min
		'trainwiki' => 259200,
	),
	'wgAutoConfirmCount' => array(
		'default' => 5,
		'trainwiki' => 20,
	),
	'+wgGroupPermissions' => array(
		'default' => array(
			'*' => array(
				'abusefilter-log' => true,
				'abusefilter-log-detail' => true,
				'abusefilter-view' => true,
			),
			'autoconfirmed' => array(
				'patrol' => true,
			),
			'autopatrolled' => array(
				'autopatrol' => true,
				'patrol' => true,
			),
			'bot' => array(
				'noanalytics' => true,
			),
			'checkuser' => array(
				// Leaks IP addresses
				'abusefilter-private' => true,
			),
			'emailconfirmed' => array(
				'skipcaptcha' => true,
			),
			'importer' => array(
				'import' => true,
				'importupload' => true,
			),
			'oversight' => array(
				'abusefilter-hidden-log' => true,
				'abusefilter-hide-log' => true,
				'browsearchive' => true,
				'deletedhistory' => true,
				'deletedtext' => true,
				'deletelogentry' => true,
				'deleterevision' => true,
				'hideuser' => true,
				'suppressionlog' => true,
				'suppressrevision' => true,
			),
			'rollbacker' => array(
				'autoconfirmed' => true,
				'rollback' => true,
			),
			'sysop' => array(
				'abusefilter-modify' => true,
				'abusefilter-modify-restricted' => true,
				'abusefilter-revert' => true,
				'bigdelete' => false, // Prevent disruption by accidentally deleting large pages
				'deletelogentry' => true,
				'deleterevision' => true,
				'massmessage' => false,
				'rollback' => true,
			),
			'user' => array(
			    'user' => true, // Enable a new restriction level globally
			),
		),
		'+encyclopedianationalwiki' => array(
			'*' => array(
				'edit' => false,
			),
		),
		'+metawiki' => array(
			'steward' => array(
				'abusefilter-modify-global' => true,
				'centralauth-lock' => true,
				'centralauth-oversight' => true,
				'centralauth-unmerge' => true,
				'createwiki' => true,
				'globalblock' => true,
				'globalunblock' => true,
				'interwiki' => true,
				'massmessage' => true,
				'noratelimit' => true,
				'userrights' => true,
				'userrights-interwiki' => true,
			),
		),
		'+trainwiki' => array(
			// Continued below, awaiting the creation of a proper override system
			'autoconfirmed' => array(
				'createpage' => true,
			),
		),
	),
	'wgGroupsRemoveFromSelf' => array(
		'default' => array(
			'*' => true,
		)
	),
	'wgRemoveGroups' => array(
		'default' => array(
			'bureaucrat' => array(
				'autopatrolled',
				'bot',
				'confirmed',
				'member',
				'rollbacker',
				'sysop',
			),
			'sysop' => array(
				'autopatrolled',
				'confirmed',
				'member',
				'rollbacker',
			),
		),
	),
	// /Permissions

	// Piwik
	'wmgPiwikSiteID' => array(
		'default' => false,
		'allthetropeswiki' => 3,
		'metawiki' => 1,
		'testwiki' => 2,
	),
	// /Piwik

	// Profiling
	'wgEnableProfileInfo' => array(
		'default' => false,
		'metawiki' => true,
	),
	'wgProfileToDatabase' => array(
		'default' => false,
		'metawiki' => true,
	),
	// /Profiling

	// Restrictions
	'+wgRestrictionLevels' => array(
		'default' => array(
		    'user',
			'steward'
		),
	),
	'+wgRestrictionTypes' => array(
	    'default' => array(
	        'delete'
	    ),
	),
	// /Restrictions

	// Server
	'wgArticlePath' => array(
		'default' => '/wiki/$1',
	),
	'wgDisableOutputCompression' => array(
		'default' => true,
	),
	'wgJobRunRate' => array(
		'default' => 0,
	),
	'wgResourceLoaderMaxQueryLength' => array(
		'default' => -1,
	),
	'wgScriptExtension' => array(
		'default' => '.php',
	),
	'wgScriptPath' => array(
		'default' => '/w',
	),
	'wgServer' => array(
		'default' => '//\$lang.orain.org',
		'spiralwiki' => 'http://espiral.org',
		'wikiconstituciowiki' => '//wikiconstitucio.org',
	),
	'wgUsePathInfo' => array(
		'default' => true,
	),
	// /Server

	// Style
	'wgDefaultSkin' => array(
		'default' => 'vector',
		'elderlordswiki' => 'monobook',
	),
	'wgLogo' => array(
		'default' => "//$wmgUploadHostname/meta.orain.org/images/c/c6/Orain.png",
		'allthetropeswiki' => "//$wmgUploadHostname/meta.orain.org/images/a/a6/ATTLogo.png",
		'botwiki' => "//$wmgUploadHostname/meta.orain.org/images/6/65/BotWiki_logo.png",
		'buswiki' => '//upload.wikimedia.org/wikipedia/commons/e/e8/Kd-logo.png',
		'computerclanwiki' => '//upload.wikimedia.org/wikipedia/commons/f/f7/CC_Wiki_Graphic_Mark_Small.png',
		'encyclopedianationalwiki' => "//$wmgUploadHostname/encyclopedianational.orain.org/images/2/24/Logo_of_the_Encyclopedia_National.png",
		'enmodamobwiki' => "//$wmgUploadHostname/meta.orain.org/images/d/d6/Modamob-logo.png",
		'frmodamobwiki' => "//$wmgUploadHostname/meta.orain.org/images/d/d6/Modamob-logo.png",
		'grayhawkwiki' => '//upload.wikimedia.org/wikipedia/commons/4/49/GrayhawkPaladinsLogo_%28small%29.png',
		'keionrailwiki' => '//upload.wikimedia.org/wikipedia/commons/e/e4/Subway_TokyoTozai.png',
		'levelswiki' => '//upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Wikilevels_logo_text.png/135px-Wikilevels_logo_text.png',
		'mediawikitesterswiki' => '//upload.wikimedia.org/wikipedia/commons/9/9a/MediaWikiTestersWiki.png',
		'spiralwiki' => '//upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Spiral_project_logo.svg/135px-Spiral_project_logo.svg.png',
		'testwiki' => "//$wmgUploadHostname/test.orain.org/images/8/8d/Twlogo.png",
		'trainwiki' => '//upload.wikimedia.org/wikipedia/commons/thumb/8/87/Train.svg/135px-Train.svg.png', 
		'wikiconstituciowiki' => '//upload.wikimedia.org/wikipedia/commons/thumb/c/ce/Flag_of_Catalonia.svg/135px-Flag_of_Catalonia.svg.png',
		'wikinambaswiki' => '//upload.wikimedia.org/wikipedia/commons/thumb/5/53/Wikinambá.png/135px-Wikinambá.png',
	),
	'wgStylePath' => array(
		'default' => "//$wmgUploadHostname/common/skins",
	),
	'wgUseAjax' => array(
		'default' => true,
	),
	// /Style
	
	// Translate
	'wgEnablePageTranslation' => array(
		'default' => true,
	),
	'wgTranslateDocumentationLanguageCode' => array(
		'default' => false,
	),
	'wgTranslateFuzzyBotName' => array(
		'default' => 'FuzzyBot',
	),
	'wmgUseTranslate' => array(
		'default' => false,
		'extloadwiki' => true, // all extensions are loaded on this wiki
		'mediawikitesterswiki' => true,
		'metawiki' => true,
		'spiralwiki' => true,
		'trainwiki' => true,
	),
	// /Translate

	// Users
	'wgAllowUserJs' => array(
		'default' => true,
	),
	'wgAllowUserCss' => array(
		'default' => true,
	),
	// /Users
);

// From https://www.mediawiki.org/wiki/Manual:$wgConf#for_1.14_and_newer
function efGetSiteParams( $conf, $wiki ) {
	global $wikiTags;
	$site = null;
	$lang = null;
	foreach( $conf->suffixes as $suffix ) {
		if ( substr( $wiki, -strlen( $suffix ) ) == $suffix ) {
			$site = $suffix;
			$lang = substr( $wiki, 0, -strlen( $suffix ) );
			break;
		}
	}
	return array(
		'suffix' => $site,
		'lang' => $lang,
		'params' => array(
			'lang' => $lang,
			'site' => $site,
			'wiki' => $wiki,
		),
		'tags' => isset( $wikiTags ) ? $wikiTags : array(),
	);
}

// Defaults
$wgGroupPermissions['bureaucrat']['renameuser'] = false;
$wgGroupPermissions['bureaucrat']['userrights'] = false;
$wgGroupPermissions['sysop']['importupload'] = false;
unset( $wgGroupPermissions['steward'] );

foreach ( $wgConf->settings['wgServer'] as $db => $server ) {
	$canonical =& $wgConf->settings['wgCanonicalServer'][$db];
	$canonical = $canonical ?: ( 'https:' . $server );
}

$wmgDocumentURI = isset( $_SERVER['DOCUMENT_URI'] ) ? $_SERVER['DOCUMENT_URI'] : null;
$wmgHTTPhost = isset( $_SERVER['HTTP_HOST'] ) ? $_SERVER['HTTP_HOST'] : null;

if ( ( basename( $_SERVER["SCRIPT_FILENAME"] ) == "thumb.php" ) && isset( $_REQUEST['sitex'] ) ) {
	$wmgHostname = $_REQUEST['sitex'];
} elseif ( preg_match( '/^\/(.*?)\/load.php$/', $wmgDocumentURI, $matches ) ) {
	$wmgHostname = $matches[1];
} elseif ( preg_match( '/^www\.(.*?\..*?)$/', $wmgHTTPhost, $matches ) ) {
	$wmgHostname = $matches[1];
} else {
	$wmgHostname = $wmgHTTPhost;
}

$wgConf->siteParamsCallback = 'efGetSiteParams';

if ( defined( "MW_DB" ) ) {
	$wgDBname = MW_DB;
	$subdomain = substr( $wgDBname, 0, -4 );
	$server = &$wgConf->settings['wgServer'][$wgDBname];
	$wmgHostname = isset( $server ) ? $server : "$subdomain.orain.org";
} elseif ( $search = array_search( '//' . $wmgHostname, $wgConf->settings['wgServer'] ) ) {
	$wgDBname = $search;
} elseif ( preg_match( '/^(.+?)\.(.+?)\.orain\.org$/', $wmgHostname, $matches ) ) {
	$wgDBname = $matches[1] . $matches[2];
} elseif ( preg_match( '/^(.*)\.orain\.org$/', $wmgHostname, $matches ) ) {
	$wgDBname = $matches[1] . 'wiki';
} else {
	$wgDBname = false;
}

/**
 * Fill the database list
 */
$DBlist = array_map( 'trim', file( "$IP/all.dblist" ) );
$wgLocalDatabases = array();

foreach ( $DBlist as $wiki ) {
	$wiki = explode( '|', $wiki, 3 );
	list( $DBname, $siteName, $wikiTagList ) = $wiki;
	$wgLocalDatabases[] = $DBname;
	$wgConf->settings['wgSitename'][$DBname] = $siteName;
	if ( $DBname == $wgDBname ) {
		$wikiTags = array_filter( explode( '|', $wikiTagList ) );	
	}
}

$wgConf->wikis = &$wgLocalDatabases;

if ( !in_array( $wgDBname, $wgLocalDatabases ) ) {
	header("HTTP/1.1 404 Not Found");
	echo(<<<RESP
<html>
<head><title>404 Not Found</title></head>
<body bgcolor="white">
<center><h1>404 Not Found</h1>
<h2>Unknown database</h2></center>
<hr><center>MediaWiki</center>
</body>
</html>
RESP
	);
	exit();
}

/**
 * Do specific things for specific wikis
 */
switch ( $wgDBname ) {
	case "allthetropeswiki":
		require_once( "$IP/extensions/CharInsert/CharInsert.php" );
		require_once( "$IP/extensions/CreateBox/CreateBox.php" );
		require_once( "$IP/extensions/intersection/DynamicPageList.php" );
		require_once( "$IP/extensions/MyVariables/MyVariables.php" );
		require_once( "$IP/extensions/RandomSelection/RandomSelection.php" );
		require_once( "$IP/extensions/SectionHide/SectionHide.php" );
		require_once( "$IP/extensions/Tabber/Tabber.php" );
		require_once( "$IP/extensions/CSS/CSS.php" );
		// Configurations
		$wgSectionHideShowtop = 1;
		break;
	case "botwiki":
		require_once( "$IP/extensions/LabeledSectionTransclusion/lst.php" );
		require_once( "$IP/extensions/LabeledSectionTransclusion/lsth.php" );
		require_once( "$IP/extensions/Tabber/Tabber.php" );
		break;
	/* case "encyclopedianationalwiki":
	case "micronationswiki":
		$wgVectorFeatures['collapsiblenav'] = array(
			'global' => false,
			'user' => true,
		);
		break; */
	case "foodopediawiki":
		require_once( "$IP/extensions/Comments/Comment.php" );
		break;
	case "loginwiki":
		$wgGroupPermissions['*']['edit'] = false;
		$wgGroupPermissions['*']['centralauth-autoaccount'] = true;
		$wgGroupPermissions['*']['read'] = true; // Make sure read rights are present
		$wgGroupPermissions['user']['read'] = true; // Make sure read rights are present
		$wgGroupPermissions['autoconfirmed']['read'] = true; // Make sure read rights are present
		unset( $wgGroupPermissions['autopatrolled'] ); // Unset all other permissions except CheckUser and Oversighter
		unset( $wgGroupPermissions['bot'] );
		unset( $wgGroupPermissions['bureaucrat'] );
		unset( $wgGroupPermissions['confirmed'] );
		unset( $wgGroupPermissions['emailconfirmed'] );
		unset( $wgGroupPermissions['importer'] );
		unset( $wgGroupPermissions['rollbacker'] );
		unset( $wgGroupPermissions['sysop'] );
		break;
	case "metawiki":
		require_once( "$IP/extensions/ApiSandbox/ApiSandbox.php" );
		require_once( "$IP/extensions/CreateWiki/CreateWiki.php" );
		break;
	case "mediawikitesterswiki":
		require_once( "$IP/extensions/ApiSandbox/ApiSandbox.php" );
		$wgCategoryTreeMaxChildren = 2000;
		require_once( "$IP/extensions/CharInsert/CharInsert.php" );
		require_once( "$IP/extensions/CreateBox/CreateBox.php" );
		require_once( "$IP/extensions/Disambiguator/Disambiguator.php" );
		require_once( "$IP/extensions/HeaderTabs/HeaderTabs.php" );
		require_once( "$IP/extensions/ImageMap/ImageMap.php" );
		require_once( "$IP/extensions/LiquidThreads/LiquidThreads.php" );
		require_once( "$IP/extensions/MyVariables/MyVariables.php" );
		require_once( "$IP/extensions/Poem/Poem.php" );
		require_once( "$IP/extensions/RandomSelection/RandomSelection.php" );
		// require_once( "$IP/extensions/SectionHide/SectionHide.php" ); // Disabled by Kudu, Requested by Arcane
		// $wgSectionHideShowtop = 1; // Disabled per the above
		require_once( "$IP/extensions/SkinPerPage/SkinPerPage.php" );
		require_once( "$IP/extensions/Tabber/Tabber.php" );
		break;
	case "patereswiki":
		require_once( "$IP/extensions/Tabber/Tabber.php" );
		break;
	case "spiralwiki":
		require_once( "$IP/extensions/cldr/cldr.php" );
		require_once( "$IP/extensions/Echo/Echo.php" );
		require_once( "$IP/extensions/Thanks/Thanks.php" );
		require_once( "$IP/extensions/UniversalLanguageSelector/UniversalLanguageSelector.php" );
		break;
	case "testwiki":
		require_once( "$IP/extensions/Echo/Echo.php" );
		require_once( "$IP/extensions/Thanks/Thanks.php" );
		break;
	case "trainwiki":
		$wgGroupPermissions['*']['createpage'] = false;
		$wgGroupPermissions['autoconfirmed']['patrol'] = false;
		$wgGroupPermissions['user']['createpage'] = false;
		break;
	case "wikinambaswiki":
		require_once( "$IP/extensions/ApiSandbox/ApiSandbox.php" );
		require_once( "$IP/extensions/LiquidThreads/LiquidThreads.php" );
		break;
	case "extloadwiki":
		require_once( "$IP/extensions/ApiSandbox/ApiSandbox.php" );
		require_once( "$IP/extensions/cldr/cldr.php" );
		require_once( "$IP/extensions/Echo/Echo.php" );
		require_once( "$IP/extensions/Tabber/Tabber.php" );
		require_once( "$IP/extensions/Thanks/Thanks.php" );
		require_once( "$IP/extensions/LiquidThreads/LiquidThreads.php" );
		require_once( "$IP/extensions/UniversalLanguageSelector/UniversalLanguageSelector.php" );
		require_once( "$IP/extensions/CharInsert/CharInsert.php" );
		require_once( "$IP/extensions/CreateBox/CreateBox.php" );
		require_once( "$IP/extensions/intersection/DynamicPageList.php" );
		require_once( "$IP/extensions/MyVariables/MyVariables.php" );
		require_once( "$IP/extensions/RandomSelection/RandomSelection.php" );
		require_once( "$IP/extensions/SectionHide/SectionHide.php" );
		require_once( "$IP/extensions/LabeledSectionTransclusion/lst.php" );
		require_once( "$IP/extensions/LabeledSectionTransclusion/lsth.php" );
		require_once( "$IP/extensions/Comments/Comment.php" );
		require_once( "$IP/extensions/CreateWiki/CreateWiki.php" );
		require_once( "$IP/extensions/CharInsert/CharInsert.php" );
		require_once( "$IP/extensions/CreateBox/CreateBox.php" );
		require_once( "$IP/extensions/Disambiguator/Disambiguator.php" );
		require_once( "$IP/extensions/HeaderTabs/HeaderTabs.php" );
		require_once( "$IP/extensions/ImageMap/ImageMap.php" );
		require_once( "$IP/extensions/MyVariables/MyVariables.php" );
		require_once( "$IP/extensions/Poem/Poem.php" );
		require_once( "$IP/extensions/RandomSelection/RandomSelection.php" );
		require_once( "$IP/extensions/SkinPerPage/SkinPerPage.php" );
		require_once( "$IP/extensions/CSS/CSS.php" );
		//require_once( "$IP/extensions/OpenSearchXML/OpenSearchXML.php" ); // addshore after adding this or DismissableSiteNotice extload broke (commented out 7.11.13)
		break;
}

/**
 * Generally setup the given wiki
 */

$wgConf->extractAllGlobals( $wgDBname );

$wgGroupPermissions['confirmed'] = &$wgGroupPermissions['autoconfirmed'];

if ( $wgDBname != "metawiki" ) {
	require_once( "$IP/extensions/InterwikiMagic/InterwikiMagic.php" );
	$wgForeignFileRepos[] = array(
		'class' => 'ForeignDBRepo',
		'name' => 'metawiki-foreign',
		'url' => "//$wmgUploadHostname/meta.orain.org/images",
		'hashLevels' => 2,
		'transformVia404' => true,
		'initialCapital' => true,
		'descBaseUrl' => "//meta.orain.org/wiki/File:",
		'scriptDirUrl' => "//meta.orain.org/w",
		'fetchDescription' => false,
		'dbType' => $wgDBtype,
		'dbServer' => $wgDBserver,
		'dbUser' => $wgDBuser,
		'dbPassword' => $wgDBpassword,
		'dbName' => 'metawiki',
		'dbFlags' => DBO_DEFAULT,
		'tablePrefix' => '',
		'hasSharedCache' => true,
		'directory' => "/usr/share/nginx/$wmgUploadHostname/meta.orain.org/images",
	);
}

/**
 * Define access rights for specific wiki groups
 */
if ( $wmgClosedWiki ) {
	// Allows easy locking of wikis and allows Stewards to do maintenance tasks
	$wgGroupPermissions['*']['edit'] = false;
	$wgGroupPermissions['*']['createaccount'] = false;
	$wgGroupPermissions['user']['edit'] = false;
	$wgGroupPermissions['user']['move'] = false;
	$wgGroupPermissions['user']['move-rootuserpages'] = false;
	$wgGroupPermissions['user']['move-subpages'] = false;
	$wgGroupPermissions['user']['movefile'] = false;
	$wgGroupPermissions['user']['reupload'] = false;
	$wgGroupPermissions['user']['reupload-shared'] = false;
	$wgGroupPermissions['user']['upload'] = false; // For wikis which have uploads enabled
	$wgGroupPermissions['autoconfirmed']['patrol'] = false;
	$wgGroupPermissions['autoconfirmed']['editsemiprotected'] = false;
	$wgGroupPermissions['sysop']['block'] = false;
	$wgGroupPermissions['sysop']['delete'] = false;
	$wgGroupPermissions['sysop']['undelete'] = false;
	$wgGroupPermissions['sysop']['import'] = false;
	$wgGroupPermissions['sysop']['importupload'] = false;
	$wgGroupPermissions['sysop']['move'] = false;
	$wgGroupPermissions['sysop']['move-rootuserpages'] = false;
	$wgGroupPermissions['sysop']['move-subpages'] = false;
	$wgGroupPermissions['sysop']['patrol'] = false;
	$wgGroupPermissions['sysop']['protect'] = false;
	$wgGroupPermissions['sysop']['editprotected'] = false;
	$wgGroupPermissions['sysop']['editsemiprotected'] = false;
	$wgGroupPermissions['sysop']['rollback'] = false;
	$wgGroupPermissions['sysop']['blockemail'] = false;
	$wgGroupPermissions['sysop']['createaccount'] = false;
	$wgGroupPermissions['sysop']['globalblock-whitelist'] = false;
	$wgGroupPermissions['sysop']['editinterface'] = false;
	$wgGroupPermissions['sysop']['nuke'] = false;
	$wgGroupPermissions['sysop']['abusefilter-modify'] = false;
	$wgGroupPermissions['sysop']['abusefilter-modify-restricted'] = false;
	$wgGroupPermissions['sysop']['movefiler'] = false;
	$wgGroupPermissions['sysop']['reupload-shared'] = false;
	$wgGroupPermissions['sysop']['reupload'] = false;
	$wgGroupPermissions['sysop']['rollback'] = false;
	$wgGroupPermissions['sysop']['abusefilter-revert'] = false;
	$wgGroupPermissions['sysop']['unblockself'] = false;
	$wgGroupPermissions['sysop']['upload'] = false;
	$wgGroupPermissions['bot']['editsemiprotected'] = false;
	$wgGroupPermissions['autopatrolled']['patrol'] = false;
	$wgGroupPermissions['confirmed']['editsemiprotected'] = false;
	$wgGroupPermissions['confirmed']['patrol'] = false;
	$wgGroupPermissions['rollbacker']['rollback'] = false;
	//Assign its own CentralNotice 'project' as long as its not already orain
	if( $wgNoticeProject !== 'orain' ) {
		$wgNoticeProject = 'closed';
	}
}

if ( $wmgPrivateWiki ) {
	// Make it easier to privatise wikis and expand on the options variably
	$wgGroupPermissions['*']['read'] = false;
	$wgGroupPermissions['user']['read'] = false;
	$wgGroupPermissions['member']['read'] = true;
	$wgGroupPermissions['sysop']['read'] = true; // Make sure Sysops/bureaucrats always have read
	$wgGroupPermissions['bureaucrat']['read'] = true;
	//Assign its own CentralNotice 'project' as long as its not already orain
	if( $wgNoticeProject !== 'orain' ) {
		$wgNoticeProject = 'private';
	}
	// Whitelist! Default carried over for tracking.
	$wgWhitelistRead = array( "Main Page", "Special:UserLogin", "Special:UserLogout", "Special:ResetPassword", "MediaWiki:Commons.css", "Special:CentralLogin" );
}

if ( $wmgUseCodeEditor ) {
	require_once( "$IP/extensions/CodeEditor/CodeEditor.php" );
	$wgScribuntoUseCodeEditor = true;
}

if ( $wmgUseDPLforum ) {
	require_once( "$IP/extensions/DPLforum/DPLforum.php" );
}

if ( $wmgUseOrainFooter ) {
    $wgFooterIcons['poweredby']['orain'] = array(
        "src" => "//$wmgUploadHostname/meta.orain.org/images/archive/9/96/20131129195014!Powered_By_Orain.png",
        "url" => "//meta.orain.org/",
        "alt" => "Hosted by Orain",
    );
}

if ( $wmgUseMobileFrontend ) {
	require_once( "$IP/extensions/MobileFrontend/MobileFrontend.php" );
}

if ( $wmgUseQuiz ) {
	require_once( "$IP/extensions/Quiz/Quiz.php" );
}

if ( $wmgUseReplaceText ) {
	require_once( "$IP/extensions/ReplaceText/ReplaceText.php" );
}

if ( $wmgUseSideBarMenu ) {
	require_once( "$IP/extensions/DataValues/DataValues.php" );
	require_once( "$IP/extensions/Validator/Validator.php" );
	require_once( "$IP/extensions/SideBarMenu/SideBarMenu.php" );
}

if ( $wmgUseTranslate ) {
	// May be moved to global after testing
	require_once( "$IP/extensions/UniversalLanguageSelector/UniversalLanguageSelector.php" );
	
	require_once( "$IP/extensions/Translate/Translate.php" );
	$wgGroupPermissions['sysop']['pagetranslation'] = true;
	$wgGroupPermissions['sysop']['translate-import'] = true;
	$wgGroupPermissions['sysop']['translate-manage'] = true;
	$wgGroupPermissions['*']['translate'] = true;
	$wgGroupPermissions['user']['translate-messagereview'] = true;

	// Allows the translation of the sidebar - Thanks QuimGil!
	$wgTranslateCC['wiki-sidebar'] = 'addSidebarMessageGroup';
	function addSidebarMessageGroup( $id ) {
		$mg = new WikiMessageGroup( $id, 'sidebar-messages' );
		$mg->setLabel( 'Sidebar' );
		$mg->setDescription( 'Messages used in the sidebar of this wiki' );
		return $mg;
	}
}

if ( $wmgUseWikiEditor ) {
	require_once( "$IP/extensions/WikiEditor/WikiEditor.php" );
	$wgDefaultUserOptions['usebetatoolbar'] = 1;
	$wgDefaultUserOptions['usebetatoolbar-cgd'] = 1;
}

if ( $wgDBname == "polymetawiki" ) {
	$wgReadOnly = "Archived wiki";
}

if ( isset( $wgCentralAuthAutoLoginWikis[$wmgHostname] ) ) {
	// Don't log into self
	unset( $wgCentralAuthAutoLoginWikis[$wmgHostname] );
	$wgCentralAuthCookieDomain = $wmgHostname;
}

$wgCacheDirectory = '/tmp/mw-cache';
$wgDebugLogFile = "/var/log/mediawiki/$wmgHostname.log";
$wgFileCacheDirectory = "/var/tmp/mediawiki/cache/$wmgHostname";
$wgLoadScript = "//$wmgUploadHostname/$wmgHostname/load.php";
$wgLocalisationCacheConf['manualRecache'] = true;
$wgUploadDirectory = "/usr/share/nginx/static.orain.org/$wmgHostname/images";
$wgUploadPath = "//$wmgUploadHostname/$wmgHostname/images";

// Piwik
$wgHooks['SkinAfterBottomScripts'][] = 'lfPiwikScript';
function lfPiwikScript( $skin, &$text='' ) {
	global $wmgPiwikSiteID, $wgUser;
	if ( !$wmgPiwikSiteID ) {
		$text .= "<!-- Piwik not enabled -->\n";
		return true;
	}
	/* if ( $wgUser->isAllowed('noanalytics') ) {
		$text .= "<!-- Piwik code omitted -->\n";
		return true;
	} */
	$id = strval( $wmgPiwikSiteID );
	$title = $skin->getRelevantTitle();
	$jstitle = Xml::encodeJsVar( $title->getPrefixedText() );
	$urltitle = $title->getPrefixedURL();
	$userType = $wgUser->isLoggedIn() ? "User" : "Anonymous";
	$text .= <<<SCRIPT
<!-- Piwik -->
<script type="text/javascript">
	var _paq = _paq || [];
	_paq.push(["trackPageView"]);
	_paq.push(["enableLinkTracking"]);

	(function() {
		var u=(("https:" == document.location.protocol) ? "https" : "http") + "://bits.orain.org/piwik/";
		_paq.push(["setTrackerUrl", u+"piwik.php"]);
		_paq.push(['setDocumentTitle', {$jstitle}]);
		_paq.push(["setSiteId", "{$id}"]);
		_paq.push(["setCustomVariable", 1, "userType", "{$userType}", "visit"]);
		var d=document, g=d.createElement("script"), s=d.getElementsByTagName("script")[0]; g.type="text/javascript";
		g.defer=true; g.async=true; g.src=u+"piwik.js"; s.parentNode.insertBefore(g,s);
	})();
</script>
<!-- End Piwik Code -->
<!-- Piwik Image Tracker -->
<noscript>
<img src="//bits.orain.org/piwik/piwik.php?idsite={$id}&amp;rec=1&amp;action_name={$urltitle}" style="border:0" alt="" />
</noscript>
<!-- End Piwik -->
SCRIPT;
	return true;
}
// /Piwik
